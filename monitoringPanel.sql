CREATE TABLE RGHA.ACCESS_TYPE (

    ID          NUMBER PRIMARY KEY NOT NULL,
    NAME        VARCHAR2(20) NOT NULL,
    DESCRIPTION VARCHAR2(100)
);

CREATE SEQUENCE RGHA.SEQ_ACCESS_TYPE;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_ACCESS_TYPE (

    P_NAME        IN RGHA.ACCESS_TYPE.NAME%TYPE,
    P_DESCRIPTION IN RGHA.ACCESS_TYPE.DESCRIPTION%TYPE)
IS

BEGIN

    INSERT INTO RGHA.ACCESS_TYPE
        VALUES (RGHA.SEQ_ACCESS_TYPE.NEXTVAL, UPPER (P_NAME),
                 UPPER (P_DESCRIPTION));    
    COMMIT;
    
END;   

CREATE TABLE RGHA.SERVER (

    ID            NUMBER PRIMARY KEY NOT NULL,
    NAME          VARCHAR2(20),
    IP            VARCHAR2(15),
    SO_USER       VARCHAR2(20),
    SO_PASS       VARCHAR2(20),
    DESCRIPTION   VARCHAR2(200),
    ENABLE        CHAR(1) DEFAULT '0'
);

CREATE SEQUENCE RGHA.SEQ_SERVER;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SERVER (

    P_NAME          IN RGHA.SERVER.NAME%TYPE,
    P_IP            IN RGHA.SERVER.IP%TYPE,
    P_SO_USER       IN RGHA.SERVER.SO_USER%TYPE,
    P_SO_PASS       IN RGHA.SERVER.SO_PASS%TYPE,
    P_DESCRIPTION   IN RGHA.SERVER.DESCRIPTION%TYPE,
    P_ENABLE        IN RGHA.SERVER.ENABLE%TYPE)
IS

BEGIN

    INSERT INTO RGHA.SERVER
        VALUES (RGHA.SEQ_SERVER.NEXTVAL, UPPER (P_NAME), P_IP, P_SO_USER,
                 P_SO_PASS, UPPER (P_DESCRIPTION), P_ENABLE);    
    COMMIT;

END;

CREATE TABLE RGHA.COMPANY (

    ID   NUMBER PRIMARY KEY NOT NULL,
    NAME VARCHAR2(20) NOT NULL
);

CREATE SEQUENCE RGHA.SEQ_COMPANY;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_COMPANY (

    P_NAME IN RGHA.COMPANY.NAME%TYPE)
IS

BEGIN
    
    INSERT INTO RGHA.COMPANY VALUES (RGHA.SEQ_COMPANY.NEXTVAL, UPPER(P_NAME));
    COMMIT;

END;

CREATE TABLE RGHA.SECTOR(

    ID         NUMBER PRIMARY KEY NOT NULL,
    NAME       VARCHAR2(50) NOT NULL,
    COMPANY_ID NUMBER NOT NULL,
    CONSTRAINT SECTOR_COMPANY_ID_FK
    FOREIGN KEY (COMPANY_ID) REFERENCES RGHA.COMPANY(ID)
);

CREATE SEQUENCE RGHA.SEQ_SECTOR;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SECTOR(

    P_NAME       IN RGHA.SECTOR.NAME%TYPE,
    P_COMPANY_ID IN RGHA.SECTOR.COMPANY_ID%TYPE)
IS

BEGIN

    INSERT INTO RGHA.SECTOR VALUES (RGHA.SEQ_SECTOR.NEXTVAL, UPPER(P_NAME), P_COMPANY_ID);
    COMMIT;

END;

CREATE TABLE RGHA.SERVICE (

    ID                  NUMBER PRIMARY KEY NOT NULL,
    NAME                VARCHAR2(50) NOT NULL,
    TASK                VARCHAR2(100),
    REPEAT_EVERY        NUMBER,
    EXECUTABLE          VARCHAR2(100),
    DESCRIPTION         VARCHAR2(200),
    SERVICE_VIEW        VARCHAR2(200),
    SITE                VARCHAR2(200),
    RESTART_DESCRIPTION VARCHAR2(200),
    LIMIT_LOW           NUMBER,
    LIMIT_HIGH          NUMBER,
    SERVICE_PARAMETERS  VARCHAR2(100),
    ENABLE              CHAR(1) DEFAULT '0'              
);

CREATE SEQUENCE RGHA.SEQ_SERVICE;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SERVICE (

    P_NAME                IN RGHA.SERVICE.NAME%TYPE,
    P_TASK                IN RGHA.SERVICE.TASK%TYPE,
    P_REPEAT_EVERY        IN RGHA.SERVICE.REPEAT_EVERY%TYPE,
    P_EXECUTABLE          IN RGHA.SERVICE.EXECUTABLE%TYPE,
    P_DESCRIPTION         IN RGHA.SERVICE.DESCRIPTION%TYPE,
    P_VIEW                IN RGHA.SERVICE.SERVICE_VIEW%TYPE,
    P_SITE                IN RGHA.SERVICE.SITE%TYPE,
    P_RESTART_DESCRIPTION IN RGHA.SERVICE.RESTART_DESCRIPTION%TYPE,
    P_LIMIT_LOW           IN RGHA.SERVICE.LIMIT_LOW%TYPE,
    P_LIMIT_HIGH          IN RGHA.SERVICE.LIMIT_HIGH%TYPE,
    P_SERVICE_PARAMETERS  IN RGHA.SERVICE.SERVICE_PARAMETERS%TYPE,
    P_ENABLE              IN RGHA.SERVICE.ENABLE%TYPE)
IS

BEGIN

    INSERT INTO RGHA.SERVICE
         VALUES (RGHA.SEQ_SERVICE.NEXTVAL, UPPER (P_NAME), UPPER (P_TASK),
                 P_REPEAT_EVERY, UPPER (P_EXECUTABLE), UPPER (P_DESCRIPTION),
                 UPPER (P_VIEW), UPPER (P_SITE), UPPER (P_RESTART_DESCRIPTION),
                 P_LIMIT_LOW, P_LIMIT_HIGH, UPPER (P_SERVICE_PARAMETERS),
                 P_ENABLE);    
    COMMIT;
    
END;

CREATE TABLE RGHA.PENDENCY (

    ID         NUMBER PRIMARY KEY NOT NULL,
    SERVICE_ID NUMBER NOT NULL,
    AMOUNT     NUMBER NOT NULL,
    LAST_DATE  DATE,
    CONSTRAINT PD_SERVICE_ID_FK
    FOREIGN KEY (SERVICE_ID) REFERENCES RGHA.SERVICE(ID)
);

CREATE SEQUENCE RGHA.SEQ_PENDENCY;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_PENDENCY (

    P_SERVICE_ID    IN RGHA.PENDENCY.SERVICE_ID%TYPE,
    P_AMOUNT        IN RGHA.PENDENCY.AMOUNT%TYPE)
IS

BEGIN

    INSERT INTO RGHA.PENDENCY
         VALUES (RGHA.SEQ_PENDENCY.NEXTVAL, P_SERVICE_ID, P_AMOUNT, SYSDATE);    
    COMMIT;
    
END;

CREATE TABLE RGHA.SERVER_ACCESS (

    ID             NUMBER PRIMARY KEY NOT NULL,
    SERVER_ID      NUMBER NOT NULL,
    ACCESS_TYPE_ID NUMBER NOT NULL,
    ACCESS_USER    VARCHAR2(20),
    ACCESS_PASS    VARCHAR2(20),
    DESCRIPTION    VARCHAR2(100),
    CONSTRAINT SA_ID_FK
    FOREIGN KEY (SERVER_ID) REFERENCES RGHA.SERVER(ID),
    CONSTRAINT SA_ACCESS_TYPE_ID_FK
    FOREIGN KEY (ACCESS_TYPE_ID) REFERENCES RGHA.ACCESS_TYPE(ID)
);

CREATE SEQUENCE RGHA.SEQ_SERVER_ACCESS;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SERVER_ACCESS(

    P_SERVER_ID      IN RGHA.SERVER_ACCESS.SERVER_ID%TYPE,
    P_ACCESS_TYPE_ID IN RGHA.SERVER_ACCESS.ACCESS_TYPE_ID%TYPE,
    P_ACCESS_USER    IN RGHA.SERVER_ACCESS.ACCESS_USER%TYPE,
    P_ACCESS_PASS    IN RGHA.SERVER_ACCESS.ACCESS_PASS%TYPE,
    P_DESCRIPTION    IN RGHA.SERVER_ACCESS.DESCRIPTION%TYPE)
    
IS

BEGIN

    INSERT INTO RGHA.SERVER_ACCESS
        VALUES (RGHA.SEQ_SERVER_ACCESS.NEXTVAL, P_SERVER_ID, P_ACCESS_TYPE_ID,
             P_ACCESS_USER, P_ACCESS_PASS, UPPER (P_DESCRIPTION));    
    COMMIT;

END;

CREATE TABLE RGHA.SERVICE_DEPENDENCY(

    ID          NUMBER PRIMARY KEY NOT NULL,
    SERVICE_ID  NUMBER NOT NULL,
    PROVIDER_ID NUMBER NOT NULL,
    CONSTRAINT SD_SERVICE_ID_FK
    FOREIGN KEY (SERVICE_ID) REFERENCES RGHA.SERVICE(ID),
    CONSTRAINT SD_PROVIDER_ID_FK
    FOREIGN KEY (SERVICE_ID) REFERENCES RGHA.SERVICE(ID)
);

CREATE SEQUENCE RGHA.SEQ_SERVICE_DEPENDENCY;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SERVICE_DEPENDENCY(

    P_SERVICE_ID  IN RGHA.SERVICE_DEPENDENCY.SERVICE_ID%TYPE,
    P_PROVIDER_ID IN RGHA.SERVICE_DEPENDENCY.PROVIDER_ID%TYPE)
IS

BEGIN

    INSERT INTO SERVICE_DEPENDENCY
        VALUES (RGHA.SEQ_SERVICE_DEPENDENCY.NEXTVAL, P_SERVICE_ID, P_PROVIDER_ID);    
    COMMIT;
    
END;

CREATE TABLE RGHA.SERVICE_SECTOR(

    ID         NUMBER PRIMARY KEY NOT NULL,
    SERVICE_ID NUMBER NOT NULL,
    SECTOR_ID  NUMBER NOT NULL,
    CONSTRAINT SS_SERVICE_ID_FK
    FOREIGN KEY (SERVICE_ID) REFERENCES RGHA.SERVICE(ID),
    CONSTRAINT SS_SECTOR_ID_FK
    FOREIGN KEY (SECTOR_ID) REFERENCES RGHA.SECTOR(ID)
);

CREATE SEQUENCE RGHA.SEQ_SERVICE_SECTOR;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SERVICE_SECTOR(

    P_SERVICE_ID IN RGHA.SERVICE_SECTOR.SERVICE_ID%TYPE,
    P_SECTOR_ID  IN RGHA.SERVICE_SECTOR.SECTOR_ID%TYPE)
IS

BEGIN

    INSERT INTO SERVICE_SECTOR
        VALUES (RGHA.SEQ_SERVICE_SECTOR.NEXTVAL, P_SERVICE_ID, P_SECTOR_ID);    
    COMMIT;
    
END;
    
CREATE TABLE RGHA.SERVER_SERVICE(

    ID         NUMBER PRIMARY KEY NOT NULL,
    SERVER_ID  NUMBER NOT NULL,
    SERVICE_ID NUMBER NOT NULL,
    CONSTRAINT SERVER_SERVICE_SERVER_FK
    FOREIGN KEY (SERVER_ID) REFERENCES SERVER(ID),
    CONSTRAINT SERVER_SERVICE_SERVICE_FK
    FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE(ID)
);

CREATE SEQUENCE SEQ_SERVER_SERVICE;

CREATE OR REPLACE PROCEDURE RGHA.INSERT_SERVER_SERVICE (

    P_SERVER_ID  IN RGHA.SERVER_SERVICE.SERVER_ID%TYPE,
    P_SERVICE_ID IN RGHA.SERVER_SERVICE.SERVICE_ID%TYPE)
IS

BEGIN

    INSERT INTO RGHA.SERVER_SERVICE 
        VALUES (SEQ_SERVER_SERVICE.NEXTVAL, P_SERVER_ID, P_SERVICE_ID);
    COMMIT;

END;

CREATE OR REPLACE VIEW RGHA.V_SERVICES_MONITOR AS

SELECT sv.id,
       sv.NAME AS nome, sv.task, sv.executable AS executavel,
       sv.description AS descricao, sv.service_view AS view_servico,
       sv.site,
       sv.restart_description AS descricao_reinicializacao,
       sv.limit_low AS limite_min, sv.limit_high AS limite_max,
       sv.SERVICE_PARAMETERS as parametros_servico,
       pd.amount as pendencias, 
       CO.NAME AS EMPRESA, SC.NAME AS SETOR,
       sr.NAME AS nome_servidor, sr.ip,
       sr.description AS descricao_servidor,
       AT.ID AS ID_TIPO_ACESSO,
       AT.NAME AS TIPO_ACESSO, 
       DECODE (SA.ACCESS_USER, 'DE REDE', '0', SA.ACCESS_USER)  AS USUARIO_ACESSO,
       DECODE (SA.ACCESS_PASS, 'DE REDE', '0', SA.ACCESS_PASS) AS SENHA_ACESSO
  FROM rgha.service sv 
       LEFT JOIN (SELECT * FROM PENDENCY WHERE ID IN(SELECT MAX (ID) FROM PENDENCY GROUP BY SERVICE_ID)) pd on pd.service_id = sv.ID 
       JOIN rgha.server_service ss ON ss.service_id = sv.ID
       JOIN rgha.server sr ON sr.ID = ss.server_id
       JOIN RGHA.SERVER_ACCESS SA ON SA.SERVER_ID = SR.ID
       JOIN RGHA.ACCESS_TYPE AT ON AT.ID = SA.ACCESS_TYPE_ID
       JOIN RGHA.SERVICE_SECTOR SVSC ON SVSC.SERVICE_ID = SV.ID
       JOIN RGHA.SECTOR SC ON SC.ID = SVSC.SECTOR_ID
       JOIN RGHA.COMPANY CO ON CO.ID = SC.COMPANY_ID
  where
       sv.enable = 1 and sr.enable = 1;
       
CREATE OR REPLACE VIEW RGHA.V_ACCESS_SERVER AS

SELECT SV.NAME AS NOME, SV.IP, SV.SO_USER AS LOGIN_SO, SV.SO_PASS AS SENHA_SO,
    SV.DESCRIPTION AS DESCRICAO, SV.ENABLE AS ATIVO, AT.NAME AS TIPO_ACESSO,
    AT.DESCRIPTION AS DESCRICAO_ACESSO, SA.ACCESS_USER AS USUARIO_ACESSO,
    SA.ACCESS_PASS AS SENHA_ACESSO
     FROM RGHA.SERVER sv
JOIN RGHA.SERVER_ACCESS SA ON SA.SERVER_ID = SV.ID
JOIN RGHA.ACCESS_TYPE AT ON SA.ACCESS_TYPE_ID = AT.ID;

CREATE OR REPLACE PROCEDURE RGHA.UPDATE_PENDENCIES

IS
    CURSOR C_SERVICES
        IS
        SELECT * FROM RGHA.SERVICE WHERE ENABLE = 1;
        
    V_AMOUNT NUMBER;

BEGIN

    FOR SERVICE in C_SERVICES LOOP
    
        EXECUTE IMMEDIATE SERVICE.SERVICE_VIEW INTO V_AMOUNT;        
        INSERT_PENDENCY(SERVICE.ID, V_AMOUNT);
        
    END LOOP;
    
    COMMIT;

END;

--DECLARE
--   x   NUMBER;
--BEGIN
--   SYS.DBMS_JOB.submit (job            => x,
--                        what           => 'RGHA.UPDATE_PENDENCIES;',
--                        next_date      => TO_DATE ('15/11/2018 12:05:21',
--                                                   'dd/mm/yyyy hh24:mi:ss'
--                                                  ),
--                        INTERVAL       => 'SYSDATE+5/1440 ',
--                        no_parse       => FALSE
--                       );
--   SYS.DBMS_OUTPUT.put_line ('Job Number is: ' || TO_CHAR (x));
--   COMMIT;
--END;
--/
    
COMMIT;